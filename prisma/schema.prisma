// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum UserRole {
    USER
    ADMIN
}

enum BookTag {
    // Movimentos Literários / Estilos de Época
    TROVADORISMO
    CLASSICISMO
    BARROCO
    ARCADISMO
    ROMANTISMO
    REALISMO // Já existe
    NATURALISMO
    PARNASIANISMO
    SIMBOLISMO
    PRE_MODERNISMO
    MODERNISMO // Já existe
    POS_MODERNISMO // Alternativa ao CONTEMPORANEO
    CONTEMPORANEO // Já existe

    // Gêneros e Subgêneros
    FICCAO_CIENTIFICA
    FANTASIA
    HORROR
    THRILLER
    POLICIAL
    DRAMA
    COMEDIA
    POESIA
    CRONICA
    LITERATURA_INFANTOJUVENIL

    // Temas e Estilos Específicos
    REGIONAL // Já existe
    LITERATURA_FEMININA
    BIOGRAFIA
    MEMORIAS
    AUTO_AJUDA
    OUTROS // Já existe
}

model Post {
    id          Int      @id @default(autoincrement())
    name        String
    content     String?
    description String?
    image       String?
    imageBlob   Bytes?
    imageMime   String?
    tag         BookTag?
    featured    Boolean  @default(false)
    // relation to Author: a post can have an author
    author      Author?  @relation(fields: [authorId], references: [id])
    authorId    Int?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@index([featured])
}

model Author {
    id     Int     @id @default(autoincrement())
    name   String
    period String?
    bio    String?

    books Book[]
    posts Post[]
}

model Book {
    id       Int    @id @default(autoincrement())
    title    String
    year     Int?
    author   Author @relation(fields: [authorId], references: [id])
    authorId Int
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    imageBlob     Bytes?
    imageMime     String?
    role          UserRole  @default(USER)
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
